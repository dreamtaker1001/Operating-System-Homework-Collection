   Thread-lib project Phase 4 README
          by Yuqi Liu.

1. Implementation summery.
    Mailbox: Initialization and Destruction is like semaphore,
  using a double pointer.

    Non-blocking send/recv: Senders always insert the new message 
  to the message queue of the destination thread. Receivers
  check the message queue of its on thread correspondingly.

    Blocking send/recv: Almost the same as the non-blocking
  version, except that semaphores are needed to ensure syncs.
  It's like the producer-consumer problem, and I need to initalize
  two semaphores per thread: one is used for sender, the other
  one for receiver. Senders and receivers can only use the
  semaphores defined inside the corresponding sender/receiver, 
  which can always ensure legal pointer access.

2. Code structure.
    ud_thread.h, t_lib.h, list.h,
    list.c, t_lib.c, sem.c, mailbox.c

    mailbox.c contains almost all codes relevant to phase 4.

3. Building the library and executables.
    Type "make test" to automatically run all relevant test cases.
    OR
    Type "make test07" to build test07, and "./test07" to run.
    ...
